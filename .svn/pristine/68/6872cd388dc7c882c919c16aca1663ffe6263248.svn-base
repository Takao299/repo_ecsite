package com.bh.ecsite.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.bh.ecsite.value.ItemDTO;
import com.bh.ecsite.value.ItemInCartDTO;


public class CartDAO extends CommonDAO{
	Connection connection = null;

	/**
	 * DAOインスタンス化時にConnectionを引数でもらう
	 * @param connection
	 */
	public CartDAO(Connection connection){
		super(connection);
	}

//↓とりあえずできるまでのテスト用
	ItemDTO selectById() {

		ItemDTO ItemDTO =new ItemDTO();
		ItemDTO.setItemId(1);
		ItemDTO.setName("ドラえもん");
		ItemDTO.setManufacturer("未来");
		ItemDTO.setColor("青");
		ItemDTO.setPrice(19800);
	return ItemDTO;
	}






	public ArrayList<ItemInCartDTO> selectByIdToCart(ItemInCartDTO cartDomain) throws Exception{

		//初期化
		PreparedStatement ps = null;


		//1件以上DBからの検索結果を返却するので、DTOを要素に持つコレクション
		//を戻り値で返却用にインスタンス化
		ArrayList<ItemInCartDTO> list = new ArrayList<ItemInCartDTO>();
		try {

			String sql1 = "INSERT INTO items_in_cart (user_id,item_id,ammout,booked_date) VALUES(?,?,?,Now())";

			String sql2 = "SELECT * FORM items_in_cart WHERE user_id = ?";

					//"SELECT user_id, item_id, amount, booked_date FROM public.items_in_cart WHERE user_id = ?";

			//SQL実行オブジェクトの取得(insert用)
			ps = connection.prepareStatement(sql1);

			//引数cartDomainを使える変数に分解
			//INSERTにVALUE値をセット
			ps.setString(1, cartDomain.getUserId());
			ItemDTO item=cartDomain.getItem();
			ps.setInt(2,item.getItemId());
			ps.setInt(3, cartDomain.getAmount());


			//SQL実行オブジェクトの取得(insert用)
			ps = connection.prepareStatement(sql2);
			ps.setString(4, cartDomain.getUserId());
			ResultSet rs = ps.executeQuery();
			//ResultSet rs = ps.executeQuery();


//			while(rs.next()) {
//				//結果セットのレコード件数分、DTOに値を詰め込んでコレクション
//				//に格納するので、while内でDTOをnewする。
//				//whileの外でDTOをnewしても意味がないので注意！
//				CartDTO cartDTO = new ItemInCartDTO();
//				cartDTO.setUserId(rs.getString("name"));
//				cartDTO.setItemId(rs.getInt("color"));
//				cartDTO.setAmount(rs.getInt("manufacturer"));
//				cartDTO.setBookedDate(rs.getDate("price"));
//				cartDTO.setBookedDate(rs.getDate("amount"));
//
//				//コレクションにDTOをセット
//				list.add(itemInCartDTO);
//
//			}
//			return list;


			//↓商品詳細で作るはず
			 //ItemDAO dao = new ItemDAO();

			while(rs.next()) {
				//結果セットのレコード件数分、DTOに値を詰め込んでコレクション
				//に格納するので、while内でDTOをnewする。
				//whileの外でDTOをnewしても意味がないので注意！

//				ItemDTO dto =new ItemDTO();
//				dto.setName(rs.getString("name"));
//				dto.setManufacturer(rs.getString("manufacturer"));
//				dto.setColor(rs.getString("color"));
//				dto.setPrice(rs.getInt("price"));

			//↓商品詳細で作るはずのメソッド
			//	ItemDTO itemDTO =dao.selectById(rs.getString("item_id"));


				ItemInCartDTO itemInCartDTO = new ItemInCartDTO();
			//↓テストようのselectById()メソッド
				ItemDTO itemDTO=selectById();


				itemInCartDTO.setItem(itemDTO);
				itemInCartDTO.setAmount(rs.getInt("amount"));


			     //ユーザIDをセット
			     itemInCartDTO.setUserId(rs.getString("user_id"));

				itemInCartDTO.setAmount(rs.getInt("amount"));
				itemInCartDTO.setBookedDate(rs.getDate("bookedDate"));

				//コレクションにDTOをセット
				list.add(itemInCartDTO);

			}
			return list;

		} catch (Exception e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw e;
		}
		finally {
			try{
				if(ps != null && !ps.isClosed()) {
					ps.close();
				}
			}
			catch(SQLException e) {
				throw e;
			}
		}
	}
}




/*
 *
 *
 *
class ItemDAO{

 ItemDTO selectByIdI(STring itemID){


}



class ItemInCartDAO{

 ArrayList<ItemInCart> selectByUserId(String userId){

//商品テーブルと結合しない
 String sql = "SELECT * FORM items_in_cart WHERE user_id = ?";

　//前田さんチームが作ってくれる！
 ItemDAO dao = new ItemDAO();
  while(rs.next()){

     ItemInCartDTO dto = new ItemInCartDTO();

　　//ユーザIDをセット
     dto.setId(rs.getString("user_id"));


　　　//SELECTした結果から、item_idを取り出し、前田さんDAOのメソッドを
　　　//呼び出せば、ItemDTOが得られる！（自分でつくらなくていい）
     ItemDTO item = dao.selectByIdI(rs.getString("item_id"))

　　　//ItemInCartとItemDTOの関連づけ
     dto.setItem(item);

    //以下のように、ItemInCartDT商品名を取り出せる！
　　//dto.item.getName();
　　　dto.amount



  }
 *
 */
