package com.bh.ecsite.servlet;

import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.bh.ecsite.common.AmazonException;
import com.bh.ecsite.common.PathConstant;
import com.bh.ecsite.service.CartService;
import com.bh.ecsite.value.ItemDTO;
import com.bh.ecsite.value.ItemInCartDTO;
import com.bh.ecsite.value.UserDTO;

/**
 * Servlet implementation class LoginController
 *
 * Loginを表すコントローラ
 */
@WebServlet("/Cart")
public class CartServlet extends CommonServlet {
	private static final long serialVersionUID = 1L;

    /**
     * @see HttpServlet#HttpServlet()
     */
    public CartServlet() {
        super();
        // TODO Auto-generated constructor stub
    }



    //ドメイン　　　データベース用ではなく表示用DTO
    ItemInCartDTO parse(String userId, int itemId, int amount ) {

    	ItemInCartDTO cartDomain = new ItemInCartDTO();
    	cartDomain.setUserId(userId);
    	//cartDomain.setItem(item);
    	ItemDTO dto = new ItemDTO();
    	dto.setItemId(itemId);
    	cartDomain.setAmount(amount);

    	return cartDomain;

    }



    /**
     * リンククリック、別サイトから移動してきたときに呼ばれ、
     * ログイン画面用のJSPを表示する。
     *
     */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//response.getWriter().append("Served at: ").append(request.getContextPath());

		doPost(request, response);
	}

	/**
	 * ブラウザのformタグでPOST送信された時に呼ばれる
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//doGet(request, response);

		try {
			HttpSession session = request.getSession();

			//ログインユーザーのオブジェクトが入っているかどうか
			if(session.getAttribute("loginUserInfo") == null) {
			//空ならログインしてない
				request.getRequestDispatcher(PathConstant.LOGIN).forward(request, response);

			}else {
			//ログインしてる

				UserDTO userDTO = (UserDTO) session.getAttribute("loginUserInfo"); //←ObjectなのでUserDTOにダウンキャスト
				String userId = userDTO.getUserId();

				//itemDetail.jspでこんな風に書いてくれる前提でゲットパラメーターをする
				//				<select name='amount'>
				//					<option selected value='1'>1</option>
				//					<option value='2'>2</option>
				//					<option value='3'>3</option>
				//					<option value='4'>4</option>
				//					<option value='5'>5</option>
				//				</select><br />
				//				<input type='hidden' name='itemId' value='123' />

				int itemId = 1;	//itemDetail.jspができるまでの仮の値
				int amount = 1;	//item_idが1の商品を1個カートに入れたと仮定
				//int itemId = Integer.parseInt(request.getParameter("itemId"));
				//int amount = Integer.parseInt(request.getParameter("amount"));
				ItemInCartDTO cartDomain = parse(userId, itemId, amount);

				CartService cartService = new CartService();

				ArrayList<ItemInCartDTO> returnDTO = cartService.executeCart(cartDomain);



				//PurchaseConfirm.jspまでカートのDTOを持ち越したいのでセッションにDTOを格納する
				//しかしセッションがパンパンに膨らむ気がして不安しかない；
				//どこかで消してやらないといけない
//				session.setAttribute("itemInCartDTO", returnDTO); //←String Object
				//session.removeAttribute("itemInCartDTO"); //消すためのコマンド

				request.setAttribute("returnDTO", returnDTO);
				request.getRequestDispatcher(PathConstant.CART).forward(request, response);

			}

		} catch (AmazonException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();

			//致命的エラーが発生した場合、ユーザには『システム管理者に連絡してください』
			//画面を表示する事、それ以外できることはない！
			request.getRequestDispatcher(PathConstant.ERROR_PAGE).forward(request, response);
		}

	}

}
