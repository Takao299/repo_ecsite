package com.bh.ecsite.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.bh.ecsite.common.AmazonException;
import com.bh.ecsite.value.ItemDTO;
import com.bh.ecsite.value.ItemInCartDTO;
import com.bh.ecsite.value.PurchaseDTO;
import com.bh.ecsite.value.PurchaseDetailDTO;
import com.bh.ecsite.value.UserDTO;


//public class PurchaseDAO extends CommonDAO {
public class PurchaseDAO {
	Connection connection = null;

	/**
	 * DAOインスタンス化時にConnectionを引数でもらう
	 * @param connection
	 */
	public PurchaseDAO(Connection connection){
		this.connection = connection;
	}
//	public PurchaseDAO(Connection connection){
//		super(connection);
//	}



	public int seqPurchaseId() throws SQLException{
		PreparedStatement ps = null;

		try {
			String sql = "select nextval('seq_purchase_id') as purchase_id";
			ps = connection.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			int purchaseId = -1;
			if(rs.next()) {
				purchaseId = rs.getInt("purchase_id");
			}
			return purchaseId;

		} catch (Exception e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw e;
		}
		finally {
			try{
				if(ps != null && !ps.isClosed()) {
					ps.close();
				}
			}
			catch(SQLException e) {
				throw e;
			}
		}
	}


	public void incertPurchace(UserDTO loginDomain,int purchaseId) throws SQLException{
		PreparedStatement ps = null;

		try {
			String sql = "INSERT INTO public.purchases (purchase_id, purchased_user, purchased_date, destination, cancel) VALUES (?, ?, ?, ?, false);";
			ps = connection.prepareStatement(sql);


			//SQLのnow()関数 … 文字列として取得する場合は 'YYYY-MM-DD hh:mm:ss' 形式、数値として取得する場合は YYYYMMDDhhmmss 形式で取得します。
			//javaの方でDate型取ってSQLに渡します
			long utildate = new java.util.Date().getTime();
			Date date = new Date(utildate);	//longをDateクラスの引数に入れるとDate型に変換される？

			//1つ目の?はpurchase_id、2つ目の?user_id、3つ目の?はpurchased_date、4つ目の?address
			ps.setInt(1, purchaseId);
			ps.setString(2, loginDomain.getUserId());
			ps.setDate(3, date);
			ps.setString(4, loginDomain.getAddress());
			ps.executeUpdate();	//1件のみ挿入

		} catch (Exception e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw e;
		}
		finally {
			try{
				if(ps != null && !ps.isClosed()) {
					ps.close();
				}
			}
			catch(SQLException e) {
				throw e;
			}
		}
	}


	//注文詳細テーブルに１件挿入 注文詳細IDはシーケンスで取得（参照）
	public void incertPurchaseDetail(int purchaseId,int itemId, int amount) throws SQLException{
		PreparedStatement ps = null;

		try {
			String sql = "INSERT INTO public.purchase_details (purchase_detail_id, purchase_id, item_id, amount) VALUES ((select nextval('seq_pur_detail_id')), ?, ?, ?);";
			//			ps = connection.prepareStatement(sql);
			ps = connection.prepareStatement(sql);


			ps.setInt(1, purchaseId);	//全部同じ
			ps.setInt(2, itemId);
			ps.setInt(3, amount);
			ps.executeUpdate();	// 1件ずつ挿入

		} catch (Exception e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw e;
		}
		finally {
			try{
				if(ps != null && !ps.isClosed()) {
					ps.close();
				}
			}
			catch(SQLException e) {
				throw e;
			}
		}
	}

	public ArrayList<PurchaseDetailDTO> selectAll(int purchaseId) throws Exception{
		PreparedStatement ps = null;
		ArrayList<PurchaseDetailDTO> list = new ArrayList<PurchaseDetailDTO>();

		try {
			String sql = "SELECT * FROM purchase_details WHERE purchase_id=?;";
			//			ps = connection.prepareStatement(sql);
			ps = connection.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();


			while(rs.next()) {
				PurchaseDetailDTO pdDTO = new PurchaseDetailDTO();
				pdDTO.setPurchaseDetailId(rs.getInt("purchase_detail_id"));
				pdDTO.setPurchaseId(purchaseId);
				ItemsDAO itemsDao = new ItemsDAO(connection);
				ItemDTO itemDTO = itemsDao.selectByItemId(rs.getInt("item_id"));
				pdDTO.setItem(itemDTO);
				pdDTO.setAmount(rs.getInt("amount"));

				list.add(pdDTO);
			}

			return list;

		} catch (Exception e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw e;
		}
		finally {
			try{
				if(ps != null && !ps.isClosed()) {
					ps.close();
				}
			}
			catch(SQLException e) {
				throw e;
			}
		}
	}


	public PurchaseDTO selectById(int purchaseId) throws SQLException {
		PreparedStatement ps = null;
		try {

	} catch (Exception e) {
		// TODO 自動生成された catch ブロック
		e.printStackTrace();
		throw e;
	}
	finally {
		try{
			if(ps != null && !ps.isClosed()) {
				ps.close();
			}
		}
		catch(SQLException e) {
			throw e;
		}
	}
		return null;
}




	public void updateItems(int itemId,int amount) throws SQLException{
		PreparedStatement ps = null;

		try {
			//item
			String sql="UPDATE items SET amount=? WHERE item_id=?";
			ps = connection.prepareStatement(sql);
			ps.setInt(1,amount);
			ps.setInt(2, itemId);

			ps.executeUpdate();

		} catch (Exception e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw e;
		}
		finally {
			try{
				if(ps != null && !ps.isClosed()) {
					ps.close();
				}
			}
			catch(SQLException e) {
				throw e;
			}
		}

	}






	public PurchaseDTO Purchase(UserDTO loginDomain) throws AmazonException{

		PreparedStatement ps = null;

		PurchaseDTO purchaseDTO = new PurchaseDTO();


		try {


			//まずは注文IDをシーケンスで取得
				//この時の注文IDは、注文詳細IDを増やしていく中でずっと固定される
				//SQL文の中で固定するのはER-図的に多分ムリ
			//String sql = "select nextval('seq_purchase_id')";
			String sql = "select nextval('seq_purchase_id') as purchase_id";
			ps = connection.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
				//今回は返す値が１個なので、インデックス（開始１）で取得。
			//int purchaseId = rs.getInt(1);	//注文ID
			int purchaseId = -1;
			if(rs.next()) {
				purchaseId = rs.getInt("purchase_id");
			}


			//先に注文テーブルに挿入しないと参照整合性エラーが起こる
			//注文テーブルに１件を挿入する
			sql = "INSERT INTO public.purchases (purchase_id, purchased_user, purchased_date, destination, cancel) VALUES (?, ?, ?, ?, false);";
			ps = connection.prepareStatement(sql);

			//SQLのnow()関数 … 文字列として取得する場合は 'YYYY-MM-DD hh:mm:ss' 形式、数値として取得する場合は YYYYMMDDhhmmss 形式で取得します。
			//javaの方でDate型取ってSQLに渡します
			long utildate = new java.util.Date().getTime();
			Date date = new Date(utildate);	//longをDateクラスの引数に入れるとDate型に変換される？

			//1つ目の?はpurchase_id、2つ目の?user_id、3つ目の?はpurchased_date、4つ目の?address
			ps.setInt(1, purchaseId);
			ps.setString(2, loginDomain.getUserId());
			ps.setDate(3, date);
			ps.setString(4, loginDomain.getAddress());
			ps.executeUpdate();	//1件のみ挿入


//			sql = "INSERT INTO public.purchase (purchase_id, purchased_user, purchased_date, destination, cancel) VALUES (?, ?, now(), ?, false);";
//			ps = connection.prepareStatement(sql);
//
//			//1つ目の?はpurchase_id、2つ目の?user_id、3つ目の?はaddress
//			ps.setInt(1, purchaseId);
//			ps.setString(2, loginDomain.getUserId());
//			ps.setString(3, loginDomain.getAddress());
//			ps.executeUpdate();	//1件のみ挿入



			//次に注文詳細テーブルに挿入していく	と同時に注文詳細DTOも作ってしまう…
			//結局手間は変わらないので注文詳細テーブルから全件取得でちゃんとDTOを作ったほうがいいのかもしれない


			//items_in_cartテーブルの商品IDごとに、注文詳細IDが増えていく
			//CartDAOを使いまわし、DTOのコレクションを取得
			CartDAO cartdao = new CartDAO(connection);
			ArrayList<ItemInCartDTO> cartDTOs = cartdao.selectAll(loginDomain.getUserId()); //このユーザーIDのカート内容を全部取得

			ArrayList<PurchaseDetailDTO> pdDTOs = new ArrayList<PurchaseDetailDTO>();

			for(ItemInCartDTO val: cartDTOs) {	//itemIdごとに取り出せる

				//在庫処理
				sql = "UPDATE items SET stock=? WHERE item_id=?";
				ps = connection.prepareStatement(sql);
				int afterStock = val.getItem().getStock() - val.getAmount();
				ps.setInt(1,afterStock);
				ps.setInt(2,val.getItem().getItemId());
				ps.executeUpdate();



				//注文詳細IDをシーケンスで取得	forごとに1ずつ増えていく
				//sql = "select nextval('seq_pur_detail_id')";
				sql = "select nextval('seq_pur_detail_id') as seq_pur_detail_id";
				ps = connection.prepareStatement(sql);
				rs = ps.executeQuery();
					//今回は返す値が１個なので、インデックス（開始１）で取得。
				//int purchaseDetailId = rs.getInt(1);	//注文詳細ID
				int purchaseDetailId = -1;
				if(rs.next()) {
					purchaseDetailId = rs.getInt("seq_pur_detail_id");
				}


				sql = "INSERT INTO public.purchase_details (purchase_detail_id, purchase_id, item_id, amount) VALUES (?, ?, ?, ?);";
				ps = connection.prepareStatement(sql);

				ps.setInt(1, purchaseDetailId);	//1ずつ増えていく
				ps.setInt(2, purchaseId);	//全部同じ
				ps.setInt(3, val.getItem().getItemId());
				ps.setInt(4, val.getAmount());
				ps.executeUpdate();	// 1件ずつ挿入


				//注文詳細DTO作成
				PurchaseDetailDTO pdDTO = new PurchaseDetailDTO();
				pdDTO.setPurchaseDetailId(purchaseDetailId);
				pdDTO.setPurchaseId(purchaseId);
					ItemsDAO itemsDao = new ItemsDAO(connection);
					ItemDTO itemDTO = itemsDao.selectByItemId(val.getItem().getItemId()); //public ItemDTO selectByItemId(int itemId)
				pdDTO.setItem(itemDTO);
				pdDTO.setAmount(val.getAmount());

				pdDTOs.add(pdDTO); //メソッドが使いたければインスタンス化せよ　↑でnullを入れようとせずnewしてーー

			}


			//最後にPurchaseDTOを作成	さっき作った注文詳細コレクションのpdDTOsをやっと格納できる
			purchaseDTO.setPurchaseId(purchaseId);
				UserDAO userDao = new UserDAO(connection);
				UserDTO userDTO = userDao.selectById(loginDomain.getUserId());
			purchaseDTO.setPurchasedUser(userDTO);
			purchaseDTO.setPurchasedItems(pdDTOs);
			purchaseDTO.setPurchasedDate(date);
			purchaseDTO.setDestination(loginDomain.getAddress());
			purchaseDTO.setCancel(false);


			return purchaseDTO;


//			//次に注文詳細テーブルに、商品ごとに挿入する	注文IDは全部同じ
//			//SQLの中で入れ子サブクエリにして注文詳細IDシーケンスを入れる
//			sql = "INSERT INTO public.purchase_details (purchase_detail_id, purchase_id, item_id, amount) VALUES ((select nextval('seq_pur_detail_id')), ?, ?, ?);";
//			ps = connection.prepareStatement(sql);
//
//			//item_idとamountをSQLの中だけで設定するには…？難しそうなのでとりあえずItemInCartDTOを作ってそこから取り出そう
//
//			//items_in_cartテーブルの商品IDごとに、注文詳細IDが増えていく
//			//CartDAOを使いまわし、DTOのコレクションを取得
//			CartDAO cartdao = new CartDAO(connection);
//			ArrayList<ItemInCartDTO> dtos = cartdao.selectAll(loginDomain.getUserId()); //このユーザーIDのカート内容を全部取得
//
//			for(ItemInCartDTO val: dtos) {	//itemIdごとに取り出せる
//				//1つ目の?はpurchase_id、2つ目の?はitem_id、3つ目の?はamount
//				ps.setInt(1, purchaseId);	//全部同じ
//				ps.setInt(2, val.getItem().getItemId());
//				ps.setInt(3, val.getAmount());
//				ps.executeUpdate();	// 1件ずつ挿入
//			}
//			//同時にPurchaseDetailDTOを作ることはできるか
//
//
//			//private ArrayList<PurchaseDetailDTO> purchasedItems;がないと完成しない　まだリターンできない


		} catch (Exception e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			throw new AmazonException(e);
		}

	}

}


